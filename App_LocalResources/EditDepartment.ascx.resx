<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BasicSettings.Text" xml:space="preserve">
    <value>Basic Module Generator Settings</value>
  </data>
  <data name="cmdAddNewRecord.Text" xml:space="preserve">
    <value>Add New Department</value>
  </data>
  <data name="cmdCreate.Text" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="CollapseAll.Text" xml:space="preserve">
    <value>Collapse All</value>
  </data>
  <data name="ConfirmDelete.Text" xml:space="preserve">
    <value>Are you sure you want to delete this Item</value>
  </data>
  <data name="ddlDepartment.Text" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="DeleteItem.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="EditItem.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditModule.Text" xml:space="preserve">
    <value>Add New Module Generator</value>
  </data>
  <data name="lblIntro.Text" xml:space="preserve">
    <value>Edit Department allows developers to predefine the specific information in different departments</value>
  </data>
  <data name="txtModule.Text" xml:space="preserve">
    <value>Module Name</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Edit Control for Module Generator</value>
  </data>
  <data name="ddlDepartment.Required" xml:space="preserve">
    <value>Module Department is required</value>
  </data>
  <data name="ExpandAll.Text" xml:space="preserve">
    <value>Expand All</value>
  </data>
  <data name="lblModuleDescription.Help" xml:space="preserve">
    <value>Module Description of your module</value>
  </data>
  <data name="lblModuleDescription.Text" xml:space="preserve">
    <value>Module Description</value>
  </data>
  <data name="txtDepartment.Help" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="txtDepartment.Text" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="lblModuleAbbreviation.Help" xml:space="preserve">
    <value>ModuleAbbreviation is used to define the specific stored procedures of this module</value>
  </data>
  <data name="lblModuleAbbreviation.Text" xml:space="preserve">
    <value>Module Abbreviation</value>
  </data>
  <data name="txtModule.Required" xml:space="preserve">
    <value>Module Name is required</value>
  </data>
  <data name="ddlDepartment.Help" xml:space="preserve">
    <value>Choose a Department of your module</value>
  </data>
  <data name="txtModuleAbbreviation.Required" xml:space="preserve">
    <value>Module Abbreviation is required</value>
  </data>
  <data name="txtModuleDescription.Required" xml:space="preserve">
    <value>Module Description is required</value>
  </data>
  <data name="Add.Title" xml:space="preserve">
    <value>Module Builder</value>
  </data>
  <data name="Department.ErrorMessage" xml:space="preserve">
    <value>Department is required</value>
  </data>
  <data name="cmdDocumentation.Text" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="InputValidation.ErrorMessage" xml:space="preserve">
    <value>You must provide the Department and Module Name and select a Module Template</value>
  </data>
  <data name="plControl.Help" xml:space="preserve">
    <value>Enter a unique name for your module control.</value>
  </data>
  <data name="plControl.Text" xml:space="preserve">
    <value>Control Name:</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>You can optionally provide a description for your module.</value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="plLanguage.Help" xml:space="preserve">
    <value>Select your preferred language for developing the module</value>
  </data>
  <data name="plLanguage.Text" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="plModule.Help" xml:space="preserve">
    <value>Enter a unique name for your module.</value>
  </data>
  <data name="plModule.Text" xml:space="preserve">
    <value>Module Name:</value>
  </data>
  <data name="plOwner.Help" xml:space="preserve">
    <value>Developers are encouraged to use a unique namespace for their modules to avoid potential clashes with other developers. Specify the name of your organization or company and it will be used as a prefix.</value>
  </data>
  <data name="plOwner.Text" xml:space="preserve">
    <value>Owner Name:</value>
  </data>
  <data name="plTemplate.Help" xml:space="preserve">
    <value>Select your preferred module development template. Module development templates are stored in the Modules subfolder within the Host Root folder.</value>
  </data>
  <data name="plTemplate.Text" xml:space="preserve">
    <value>Template:</value>
  </data>
  <data name="SuperUser.ErrorMessage" xml:space="preserve">
    <value>You must be a Host User to create new modules</value>
  </data>
  <data name="TemplateProblem.ErrorMessage" xml:space="preserve">
    <value>An error occurred when reading the selected module template files</value>
  </data>
  <data name="VB.Text" xml:space="preserve">
    <value>Visual Basic</value>
  </data>
  <data name="cmdEditDepartment.Text" xml:space="preserve">
    <value>Edit Department</value>
  </data>
  <data name="txtRootNamespace.Help" xml:space="preserve">
    <value>Developers are encouraged to use a unique namespace for their modules to avoid potential clashes with other developers. Specify the name of your organization or company and it will be used as a prefix.</value>
  </data>
  <data name="txtRootNamespace.Text" xml:space="preserve">
    <value>Module Namespace</value>
  </data>
  <data name="txtOwnerEmail.Help" xml:space="preserve">
    <value>Owner Email Address (format dhoang@bh.lacounty.gov)</value>
  </data>
  <data name="txtOwnerEmail.Text" xml:space="preserve">
    <value>Owner Email</value>
  </data>
  <data name="txtOwnerFolder.Help" xml:space="preserve">
    <value>The module will be created in this Owner Folder</value>
  </data>
  <data name="txtOwnerFolder.Text" xml:space="preserve">
    <value>Owner Folder</value>
  </data>
  <data name="txtOwnerName.Help" xml:space="preserve">
    <value>Name of Owner</value>
  </data>
  <data name="txtOwnerName.Text" xml:space="preserve">
    <value>Owner Name</value>
  </data>
  <data name="txtOwnerOrganization.Help" xml:space="preserve">
    <value>Organization of Owner</value>
  </data>
  <data name="txtOwnerOrganization.Text" xml:space="preserve">
    <value>Owner Organization</value>
  </data>
  <data name="txtOwnerWebsite.Help" xml:space="preserve">
    <value>Website of Owner</value>
  </data>
  <data name="txtOwnerWebsite.Text" xml:space="preserve">
    <value>Owner Url</value>
  </data>
  <data name="txtModuleName.Required" xml:space="preserve">
    <value>Module Name is required</value>
  </data>
  <data name="txtIconFile.Help" xml:space="preserve">
    <value>Icon will be used for display module extension (format ~/images/DBH_Extension.gif)</value>
  </data>
  <data name="txtIconFile.Text" xml:space="preserve">
    <value>Icon File</value>
  </data>
</root>